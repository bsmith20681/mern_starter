{"ast":null,"code":"import fetch from 'isomorphic-fetch';\nimport { API } from '../config';\nimport cookie from 'js-cookie';\nexport const signup = user => {\n  return fetch(`${API}/signup`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  }).then(response => {\n    return response.json();\n  }).catch(error => console.log(error));\n};\nexport const signin = user => {\n  return fetch(`${API}/signin`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  }).then(response => {\n    return response.json();\n  }).catch(error => console.log(error));\n};\nexport const setCookie = (key, value) => {\n  if (false) {\n    cookie.set(key, value, {\n      expires: 1\n    });\n  }\n};\nexport const removeCookie = key => {\n  if (false) {\n    cookie.remove(key, {\n      expires: 1\n    });\n  }\n};\nexport const getCookie = key => {\n  if (false) {\n    cookie.get(key);\n  }\n};\nexport const setLocalStorage = (key, value) => {\n  if (false) {\n    localstorage.setItem(key, JSON.stringify(value));\n  }\n};\nexport const removeStorage = key => {\n  if (false) {\n    localstorage.removeItem(key);\n  }\n};\nexport const authenticate = (data, next) => {\n  setCookie('token', data.token);\n  setLocalStorage('user', data.user);\n  next();\n};\nexport const isAuth = () => {\n  if (false) {\n    const cookieChecked = getCookie('token');\n\n    if (cookieChecked) {\n      if (localStoreage.getItem('user')) {\n        return JSON.parse(localStore.getItem('user'));\n      } else {\n        return false;\n      }\n    }\n  }\n};","map":{"version":3,"sources":["D:/mern_starter/frontend/actions/auth.js"],"names":["fetch","API","cookie","signup","user","method","headers","Accept","body","JSON","stringify","then","response","json","catch","error","console","log","signin","setCookie","key","value","set","expires","removeCookie","remove","getCookie","get","setLocalStorage","localstorage","setItem","removeStorage","removeItem","authenticate","data","next","token","isAuth","cookieChecked","localStoreage","getItem","parse","localStore"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,SAASC,GAAT,QAAoB,WAApB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,OAAO,MAAMC,MAAM,GAAGC,IAAI,IAAI;AAC5B,SAAOJ,KAAK,CAAE,GAAEC,GAAI,SAAR,EAAkB;AAC1BI,IAAAA,MAAM,EAAE,MADkB;AAE1BC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,kBADH;AAEL,sBAAgB;AAFX,KAFiB;AAM1BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AANoB,GAAlB,CAAL,CAQFO,IARE,CAQGC,QAAQ,IAAI;AACd,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,GAVE,EAWFC,KAXE,CAWIC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAXb,CAAP;AAYD,CAbM;AAeP,OAAO,MAAMG,MAAM,GAAGd,IAAI,IAAI;AAC5B,SAAOJ,KAAK,CAAE,GAAEC,GAAI,SAAR,EAAkB;AAC1BI,IAAAA,MAAM,EAAE,MADkB;AAE1BC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,kBADH;AAEL,sBAAgB;AAFX,KAFiB;AAM1BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AANoB,GAAlB,CAAL,CAQFO,IARE,CAQGC,QAAQ,IAAI;AACd,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,GAVE,EAWFC,KAXE,CAWIC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAXb,CAAP;AAYD,CAbM;AAeP,OAAO,MAAMI,SAAS,GAAG,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACvC,aAAoB;AAClBnB,IAAAA,MAAM,CAACoB,GAAP,CAAWF,GAAX,EAAgBC,KAAhB,EAAuB;AACrBE,MAAAA,OAAO,EAAE;AADY,KAAvB;AAGD;AACF,CANM;AAQP,OAAO,MAAMC,YAAY,GAAIJ,GAAD,IAAS;AACnC,aAAoB;AAClBlB,IAAAA,MAAM,CAACuB,MAAP,CAAcL,GAAd,EAAmB;AACjBG,MAAAA,OAAO,EAAE;AADQ,KAAnB;AAGD;AACF,CANM;AAQP,OAAO,MAAMG,SAAS,GAAIN,GAAD,IAAS;AAChC,aAAoB;AAClBlB,IAAAA,MAAM,CAACyB,GAAP,CAAWP,GAAX;AACD;AACF,CAJM;AAMP,OAAO,MAAMQ,eAAe,GAAG,CAACR,GAAD,EAAMC,KAAN,KAAgB;AAC7C,aAAoB;AAClBQ,IAAAA,YAAY,CAACC,OAAb,CAAqBV,GAArB,EAA0BX,IAAI,CAACC,SAAL,CAAeW,KAAf,CAA1B;AACD;AACF,CAJM;AAMP,OAAO,MAAMU,aAAa,GAAIX,GAAD,IAAS;AACpC,aAAoB;AAClBS,IAAAA,YAAY,CAACG,UAAb,CAAwBZ,GAAxB;AACD;AACF,CAJM;AAMP,OAAO,MAAMa,YAAY,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAC1ChB,EAAAA,SAAS,CAAC,OAAD,EAAUe,IAAI,CAACE,KAAf,CAAT;AACAR,EAAAA,eAAe,CAAC,MAAD,EAASM,IAAI,CAAC9B,IAAd,CAAf;AACA+B,EAAAA,IAAI;AACL,CAJM;AAMP,OAAO,MAAME,MAAM,GAAG,MAAM;AAC1B,aAAoB;AAClB,UAAMC,aAAa,GAAGZ,SAAS,CAAC,OAAD,CAA/B;;AACA,QAAGY,aAAH,EAAkB;AAChB,UAAGC,aAAa,CAACC,OAAd,CAAsB,MAAtB,CAAH,EAAiC;AAC/B,eAAO/B,IAAI,CAACgC,KAAL,CAAWC,UAAU,CAACF,OAAX,CAAmB,MAAnB,CAAX,CAAP;AACD,OAFD,MAEO;AACL,eAAO,KAAP;AACD;AACF;AACF;AACF,CAXM","sourcesContent":["import fetch from 'isomorphic-fetch';\r\nimport { API } from '../config';\r\nimport cookie from 'js-cookie';\r\n\r\nexport const signup = user => {\r\n  return fetch(`${API}/signup`, {\r\n      method: 'POST',\r\n      headers: {\r\n          Accept: 'application/json',\r\n          'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(user)\r\n  })\r\n      .then(response => {\r\n          return response.json();\r\n      })\r\n      .catch(error => console.log(error));\r\n};\r\n\r\nexport const signin = user => {\r\n  return fetch(`${API}/signin`, {\r\n      method: 'POST',\r\n      headers: {\r\n          Accept: 'application/json',\r\n          'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(user)\r\n  })\r\n      .then(response => {\r\n          return response.json();\r\n      })\r\n      .catch(error => console.log(error));\r\n};\r\n\r\nexport const setCookie = (key, value) => {\r\n  if(process.browser) {\r\n    cookie.set(key, value, {\r\n      expires: 1\r\n    })\r\n  }\r\n}\r\n\r\nexport const removeCookie = (key) => {\r\n  if(process.browser) {\r\n    cookie.remove(key, {\r\n      expires: 1\r\n    })\r\n  }\r\n}\r\n\r\nexport const getCookie = (key) => {\r\n  if(process.browser) {\r\n    cookie.get(key)\r\n  }\r\n}\r\n\r\nexport const setLocalStorage = (key, value) => {\r\n  if(process.browser) {\r\n    localstorage.setItem(key, JSON.stringify(value))\r\n  }\r\n}\r\n\r\nexport const removeStorage = (key) => {\r\n  if(process.browser) {\r\n    localstorage.removeItem(key)\r\n  }\r\n}\r\n\r\nexport const authenticate = (data, next) => {\r\n  setCookie('token', data.token)\r\n  setLocalStorage('user', data.user)\r\n  next()\r\n}\r\n\r\nexport const isAuth = () => {\r\n  if(process.browser) {\r\n    const cookieChecked = getCookie('token')\r\n    if(cookieChecked) {\r\n      if(localStoreage.getItem('user')){\r\n        return JSON.parse(localStore.getItem('user'))\r\n      } else {\r\n        return false\r\n      }\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}